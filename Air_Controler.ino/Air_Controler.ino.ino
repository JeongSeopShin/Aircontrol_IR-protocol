#include "WiFiEsp.h"
#include "Relay.h"            // Relay
#include <IRLibSendBase.h>    //We need the base code
#include <IRLib_HashRaw.h>    //Only use raw sender

IRsendRaw mySender;

// Emulate Serial1 on pins 6/7 if not present
#ifndef HAVE_HWSERIAL1
#include "SoftwareSerial.h"
SoftwareSerial Serial1(4, 5); // RX, TX
#endif

char ssid[] = "belkin.cd8";       // your network SSID (name)
char pass[] = "9a9a86b2";        // your network password
int status = WL_IDLE_STATUS;     // the Wifi radio's status
int reqCount = 0;                // number of requests received

int command  = 0;

int Relay = 12;

int val;

WiFiEspServer server(80);

// LG 에어컨 제어 코드
#define RAW_DATA_LEN_LG 60
uint16_t rawDataLGOn[RAW_DATA_LEN_LG] ={
   3069, 9975, 445, 1659, 424, 645, 399, 636, 
   399, 637, 398, 1643, 428, 637, 398, 637, 
   398, 645, 399, 644, 399, 637, 398, 645, 
   399, 619, 424, 644, 399, 636, 400, 644, 
   399, 627, 424, 636, 398, 1687, 400, 637, 
   397, 639, 396, 623, 420, 623, 420, 1673, 
   421, 624, 418, 642, 393, 1677, 394, 1677, 
   394, 642, 393, 1000};

uint16_t rawDataLGOff[RAW_DATA_LEN_LG] ={
   3175, 9980, 455, 1651, 430, 626, 424, 637, 
   400, 618, 425, 1649, 430, 627, 424, 626, 
   425, 636, 400, 1678, 401, 1660, 426, 644, 
   400, 618, 425, 636, 399, 626, 425, 635, 
   400, 635, 400, 644, 399, 627, 423, 645, 
   398, 638, 397, 639, 395, 1674, 397, 631, 
   419, 1684, 395, 650, 393, 642, 394, 642, 
   393, 1685, 395, 1000};

uint16_t rawDataLGDry[RAW_DATA_LEN_LG] ={
   3069, 9983, 400, 1657, 425, 645, 399, 626, 
   424, 637, 399, 1670, 400, 636, 399, 637, 
   398, 637, 398, 645, 398, 637, 399, 618, 
   425, 636, 399, 1670, 400, 627, 424, 644, 
   399, 1677, 401, 636, 399, 1661, 425, 627, 
   422, 1672, 398, 630, 421, 623, 419, 624, 
   418, 667, 369, 1666, 420, 1676, 395, 1665, 
   420, 643, 393, 1000};
   
uint16_t rawDataLG23[RAW_DATA_LEN_LG] ={
   3092, 9954, 428, 1645, 446, 619, 424, 636, 
   399, 645, 399, 1631, 447, 636, 399, 637, 
   399, 636, 399, 637, 398, 637, 399, 619, 
   424, 637, 399, 1661, 425, 636, 399, 644, 
   399, 644, 399, 1652, 427, 636, 398, 637, 
   398, 638, 397, 630, 420, 640, 394, 1683, 
   396, 625, 418, 624, 419, 641, 394, 1684, 
   395, 641, 394, 1000};

uint16_t rawDataLG24[RAW_DATA_LEN_LG] ={
   3066, 9953, 429, 1644, 447, 619, 424, 637, 
   398, 645, 399, 1632, 447, 636, 399, 636, 
   399, 637, 398, 637, 399, 637, 399, 618, 
   424, 637, 399, 1661, 425, 636, 399, 644, 
   399, 645, 398, 1678, 401, 636, 398, 638, 
   397, 1680, 399, 630, 420, 631, 419, 1676, 
   395, 642, 393, 650, 393, 642, 394, 1684, 
   394, 1677, 394, 1000};

uint16_t rawDataLG25[RAW_DATA_LEN_LG] ={
   3095, 9953, 428, 1667, 425, 619, 424, 636, 
   399, 645, 399, 1631, 447, 637, 398, 637, 
   399, 636, 399, 637, 399, 637, 398, 619, 
   424, 637, 399, 1661, 425, 636, 399, 644, 
   399, 644, 399, 1679, 400, 636, 398, 1672, 
   398, 639, 396, 648, 395, 640, 394, 1684, 
   395, 625, 418, 624, 419, 1678, 392, 642, 
   394, 642, 393, 1000};

// Samsung 에어컨 제어 코드
#define RAW_DATA_LEN_S1 234
#define RAW_DATA_LEN_S2 130

/*const uint16_t rawDataSOn[RAW_DATA_LEN_S1] PROGMEM ={
  404, 616, 379, 642, 354, 1612, 378, 1612, 
  404, 1586, 404, 1586, 405, 3092, 2879, 9084, 
  380, 1610, 380, 615, 380, 591, 404, 590, 
  405, 590, 405, 591, 404, 592, 403, 642, 
  353, 642, 353, 1637, 378, 617, 379, 616, 
  379, 616, 380, 1610, 380, 1610, 380, 615, 
  380, 1610, 379, 1586, 405, 1585, 405, 1586, 
  404, 616, 379, 642, 353, 642, 353, 642, 
  378, 617, 378, 618, 378, 617, 379, 616, 
  380, 615, 380, 615, 380, 615, 380, 616, 
  379, 616, 379, 616, 379, 591, 404, 591, 
  404, 591, 404, 592, 403, 617, 378, 1639, 
  351, 1638, 377, 618, 378, 617, 379, 616, 
  380, 1611, 379, 615, 380, 616, 379, 616, 
  379, 616, 379, 616, 379, 615, 380, 592, 
  404, 1611, 379, 1638, 352, 1638, 352, 1638, 
  379, 1000};

const uint16_t rawDataSOff[RAW_DATA_LEN_S1] PROGMEM ={
  404, 616, 379, 642, 354, 1612, 378, 1612, 
  404, 1586, 404, 1586, 405, 3092, 2879, 9084, 
  380, 1610, 380, 615, 380, 591, 404, 590, 
  405, 590, 405, 591, 404, 592, 403, 642, 
  353, 642, 353, 1637, 378, 617, 379, 616, 
  379, 616, 380, 1610, 380, 1610, 380, 615, 
  380, 1610, 379, 1586, 405, 1585, 405, 1586, 
  404, 616, 379, 642, 353, 642, 353, 642, 
  378, 617, 378, 618, 378, 617, 379, 616, 
  380, 615, 380, 615, 380, 615, 380, 616, 
  379, 616, 379, 616, 379, 591, 404, 591, 
  404, 591, 404, 592, 403, 617, 378, 1639, 
  351, 1638, 377, 618, 378, 617, 379, 616, 
  380, 1611, 379, 615, 380, 616, 379, 616, 
  379, 616, 379, 616, 379, 615, 380, 592, 
  404, 1611, 379, 1638, 352, 1638, 352, 1638, 
  379, 1000};

const uint16_t rawDataSDry[RAW_DATA_LEN_S1] PROGMEM ={
  404, 616, 379, 642, 354, 1612, 378, 1612, 
  404, 1586, 404, 1586, 405, 3092, 2879, 9084, 
  380, 1610, 380, 615, 380, 591, 404, 590, 
  405, 590, 405, 591, 404, 592, 403, 642, 
  353, 642, 353, 1637, 378, 617, 379, 616, 
  379, 616, 380, 1610, 380, 1610, 380, 615, 
  380, 1610, 379, 1586, 405, 1585, 405, 1586, 
  404, 616, 379, 642, 353, 642, 353, 642, 
  378, 617, 378, 618, 378, 617, 379, 616, 
  380, 615, 380, 615, 380, 615, 380, 616, 
  379, 616, 379, 616, 379, 591, 404, 591, 
  404, 591, 404, 592, 403, 617, 378, 1639, 
  351, 1638, 377, 618, 378, 617, 379, 616, 
  380, 1611, 379, 615, 380, 616, 379, 616, 
  379, 616, 379, 616, 379, 615, 380, 592, 
  404, 1611, 379, 1638, 352, 1638, 352, 1638, 
  379, 1000};*/

const uint16_t rawDataS23[RAW_DATA_LEN_S1] PROGMEM ={
  498, 18016, 2913, 9054, 408, 615, 380, 1582, 
  408, 615, 380, 615, 379, 616, 380, 614, 
  381, 614, 381, 615, 380, 591, 404, 1584, 
  406, 590, 405, 590, 405, 1611, 379, 642, 
  353, 642, 353, 1611, 405, 1585, 406, 1585, 
  405, 1585, 406, 1584, 406, 615, 380, 615, 
  380, 590, 405, 590, 405, 590, 405, 590, 
  405, 615, 380, 642, 353, 642, 353, 642, 
  353, 642, 378, 617, 379, 616, 380, 615, 
  380, 615, 380, 615, 380, 618, 377, 615, 
  380, 615, 380, 591, 405, 590, 405, 590, 
  405, 590, 405, 591, 404, 615, 380, 642, 
  353, 642, 353, 642, 353, 642, 378, 617, 
  379, 616, 379, 616, 380, 1585, 405, 1585, 
  405, 1585, 405, 1584, 406, 3091, 2880, 9060, 
  405, 1585, 405, 642, 353, 642, 353, 642, 
  353, 642, 377, 618, 378, 617, 379, 616, 
  380, 615, 380, 1610, 380, 615, 380, 615, 
  380, 615, 380, 615, 380, 1585, 405, 590, 
  405, 1586, 404, 1637, 353, 1637, 353, 1637, 
  378, 617, 379, 616, 379, 616, 380, 615, 
  380, 615, 380, 615, 380, 615, 380, 615, 
  380, 591, 404, 591, 404, 590, 405, 591, 
  404, 591, 405, 642, 352, 643, 353, 642, 
  352, 1638, 377, 1613, 378, 1612, 379, 616, 
  379, 1611, 379, 616, 379, 616, 379, 616, 
  379, 1586, 404, 591, 405, 591, 403, 616, 
  380, 642, 353, 642, 353, 642, 353, 643, 
  377, 1613, 378, 1612, 379, 1610, 380, 1611, 
  379, 1000};

const uint16_t rawDataS24[RAW_DATA_LEN_S2] PROGMEM ={
  404, 616, 379, 642, 354, 1612, 378, 1612, 
  404, 1586, 404, 1586, 405, 3092, 2879, 9084, 
  380, 1610, 380, 615, 380, 591, 404, 590, 
  405, 590, 405, 591, 404, 592, 403, 642, 
  353, 642, 353, 1637, 378, 617, 379, 616, 
  379, 616, 380, 1610, 380, 1610, 380, 615, 
  380, 1610, 379, 1586, 405, 1585, 405, 1586, 
  404, 616, 379, 642, 353, 642, 353, 642, 
  378, 617, 378, 618, 378, 617, 379, 616, 
  380, 615, 380, 615, 380, 615, 380, 616, 
  379, 616, 379, 616, 379, 591, 404, 591, 
  404, 591, 404, 592, 403, 617, 378, 1639, 
  351, 1638, 377, 618, 378, 617, 379, 616, 
  380, 1611, 379, 615, 380, 616, 379, 616, 
  379, 616, 379, 616, 379, 615, 380, 592, 
  404, 1611, 379, 1638, 352, 1638, 352, 1638, 
  379, 1000};

const uint16_t rawDataS25[RAW_DATA_LEN_S1] PROGMEM ={
  498, 18007, 2887, 9053, 411, 587, 407, 1581, 
  408, 641, 353, 642, 353, 642, 378, 617, 
  378, 617, 379, 616, 380, 615, 381, 1584, 
  406, 615, 380, 615, 380, 1584, 406, 615, 
  380, 590, 405, 1585, 406, 1584, 406, 1611, 
  379, 1611, 402, 1588, 405, 616, 379, 616, 
  380, 615, 380, 615, 380, 615, 380, 615, 
  380, 615, 380, 615, 380, 591, 404, 590, 
  405, 591, 405, 590, 405, 591, 404, 644, 
  351, 642, 353, 642, 377, 618, 378, 617, 
  379, 616, 380, 615, 380, 616, 380, 615, 
  380, 615, 380, 615, 380, 615, 380, 615, 
  380, 591, 404, 590, 405, 591, 404, 591, 
  405, 591, 404, 642, 353, 1612, 378, 1612, 
  403, 1587, 404, 1586, 405, 3091, 2880, 9061, 
  404, 1610, 381, 615, 380, 615, 380, 590, 
  405, 590, 405, 590, 405, 591, 404, 615, 
  380, 642, 353, 1637, 352, 643, 377, 618, 
  378, 1612, 379, 616, 380, 1610, 380, 615, 
  380, 1610, 380, 1585, 405, 1586, 404, 1586, 
  404, 592, 404, 642, 353, 642, 353, 642, 
  353, 642, 377, 618, 379, 616, 379, 616, 
  380, 616, 379, 616, 379, 616, 379, 616, 
  380, 615, 380, 615, 380, 590, 405, 590, 
  405, 1585, 405, 591, 404, 642, 353, 1637, 
  353, 1638, 377, 618, 378, 617, 379, 616, 
  379, 1611, 379, 616, 379, 616, 380, 615, 
  380, 615, 379, 591, 405, 590, 405, 591, 
  404, 1610, 380, 1637, 352, 1638, 353, 1637, 
  379, 1000};

// Carrier 에어컨 제어 코드
const uint16_t rawDataCOn[RAW_DATA_LEN_S1] PROGMEM ={
  4321, 4511, 456, 1699, 456, 625, 452, 1699, 
457, 1699, 457, 649, 428, 649, 429, 1699, 
457, 649, 428, 650, 428, 1699, 457, 649, 
433, 645, 428, 1700, 455, 1701, 455, 649, 
428, 1701, 454, 1702, 475, 629, 448, 1706, 
450, 1706, 448, 1708, 448, 1708, 447, 1708, 
447, 1708, 448, 631, 447, 1707, 448, 630, 
447, 631, 447, 631, 447, 630, 447, 631, 
447, 631, 447, 630, 447, 1708, 448, 1708, 
447, 631, 447, 631, 447, 630, 448, 630, 
447, 631, 447, 1708, 448, 630, 447, 631, 
447, 1707, 448, 1708, 447, 1708, 447, 1709, 
447, 1708, 447, 5309, 4312, 4520, 447, 1709, 
447, 631, 447, 1708, 447, 1709, 447, 631, 
447, 630, 447, 1708, 448, 630, 447, 631, 
447, 1708, 447, 631, 447, 631, 446, 1708, 
448, 1708, 447, 631, 447, 1708, 447, 1708, 
447, 631, 447, 1709, 446, 1709, 447, 1709, 
446, 1709, 447, 1708, 447, 1709, 447, 631, 
447, 1708, 447, 631, 447, 631, 447, 631, 
446, 631, 447, 631, 447, 630, 447, 631, 
447, 1709, 447, 1708, 447, 631, 447, 631, 
447, 631, 446, 631, 447, 631, 447, 1709, 
446, 632, 446, 631, 447, 1709, 446, 1709, 
447, 1709, 446, 1709, 447, 1709, 447, 1000};

const uint16_t rawDataCOff[RAW_DATA_LEN_S1] PROGMEM ={
  4323, 4538, 429, 1726, 429, 650, 428, 1726, 
430, 1726, 429, 650, 428, 650, 428, 1725, 
430, 650, 428, 649, 428, 1699, 457, 649, 
428, 649, 428, 1726, 430, 1725, 430, 649, 
428, 1726, 429, 651, 427, 1727, 451, 1705, 
450, 1706, 449, 1706, 449, 656, 422, 1708, 
448, 1708, 448, 1708, 447, 656, 422, 632, 
446, 632, 446, 631, 447, 1708, 448, 632, 
446, 631, 446, 1708, 447, 1709, 447, 1709, 
448, 655, 422, 632, 446, 632, 446, 632, 
446, 632, 446, 632, 446, 631, 446, 632, 
446, 1708, 447, 1708, 448, 1708, 448, 1708, 
447, 1709, 447, 5310, 4313, 4520, 447, 1708, 
447, 632, 446, 1709, 447, 1708, 447, 632, 
446, 631, 447, 1709, 446, 632, 446, 632, 
446, 1709, 446, 632, 446, 632, 446, 1709, 
446, 1710, 446, 632, 445, 1711, 445, 656, 
422, 1733, 422, 1734, 422, 1734, 422, 1734, 
421, 657, 421, 1734, 422, 1734, 421, 1734, 
422, 656, 421, 657, 421, 656, 422, 656, 
422, 1734, 421, 657, 421, 657, 421, 1735, 
421, 1735, 421, 1734, 421, 657, 421, 656, 
422, 656, 422, 656, 421, 657, 421, 657, 
421, 657, 421, 656, 421, 1735, 421, 1734, 
421, 1735, 421, 1735, 421, 1735, 421, 1000};

const uint16_t rawDataCDry[RAW_DATA_LEN_S1] PROGMEM ={
  4325, 4510, 456, 1696, 459, 650, 428, 1697, 
458, 1726, 429, 650, 428, 650, 428, 1726, 
429, 650, 428, 649, 428, 1726, 429, 650, 
428, 649, 428, 1726, 430, 1725, 430, 649, 
428, 1726, 429, 650, 449, 629, 448, 630, 
447, 1706, 450, 1706, 448, 1708, 447, 1709, 
447, 1708, 448, 1708, 447, 1707, 448, 1708, 
447, 632, 445, 656, 422, 656, 422, 632, 
445, 632, 446, 632, 445, 633, 445, 1708, 
447, 656, 422, 632, 445, 1708, 447, 656, 
422, 631, 446, 1709, 447, 1708, 447, 632, 
445, 1709, 447, 1708, 447, 632, 446, 1709, 
446, 1709, 447, 5310, 4312, 4520, 446, 1709, 
446, 632, 446, 1709, 446, 1709, 446, 632, 
448, 630, 445, 1709, 446, 632, 446, 632, 
446, 1709, 446, 632, 445, 633, 445, 1709, 
446, 1710, 446, 632, 445, 1710, 445, 656, 
422, 632, 445, 633, 446, 1709, 445, 1710, 
446, 1710, 445, 1710, 445, 1710, 446, 1733, 
422, 1710, 445, 1734, 421, 657, 421, 657, 
421, 656, 421, 657, 421, 657, 421, 656, 
422, 656, 421, 1734, 422, 656, 421, 657, 
421, 1734, 421, 657, 421, 657, 421, 1734, 
421, 1734, 421, 657, 421, 1735, 420, 1734, 
422, 656, 421, 1735, 421, 1734, 421, 1000};

const uint16_t rawDataC23[RAW_DATA_LEN_S1] PROGMEM ={
  4322, 4511, 455, 1700, 456, 624, 453, 1699, 
457, 1699, 457, 649, 429, 649, 428, 1699, 
457, 649, 428, 650, 428, 1699, 456, 650, 
428, 649, 428, 1700, 455, 1700, 456, 649, 
428, 1701, 454, 1703, 452, 651, 449, 1706, 
449, 1707, 449, 1707, 448, 1707, 448, 1708, 
448, 1707, 448, 630, 448, 1708, 447, 631, 
447, 631, 447, 630, 448, 630, 447, 631, 
447, 630, 447, 631, 447, 1708, 448, 630, 
447, 1708, 448, 630, 448, 630, 447, 631, 
447, 631, 447, 1708, 447, 631, 447, 1708, 
447, 631, 447, 1708, 448, 1708, 447, 1709, 
447, 1708, 447, 5310, 4313, 4519, 447, 1708, 
447, 631, 447, 1708, 448, 1708, 447, 631, 
447, 631, 447, 1709, 447, 631, 447, 631, 
447, 1708, 447, 630, 448, 630, 448, 1708, 
447, 1709, 447, 631, 447, 1708, 447, 1708, 
447, 631, 447, 1708, 447, 1708, 447, 1709, 
446, 1709, 446, 1709, 447, 1708, 447, 631, 
447, 1709, 446, 631, 447, 631, 447, 631, 
446, 631, 447, 631, 447, 631, 446, 631, 
447, 1709, 447, 631, 446, 1709, 446, 631, 
447, 631, 446, 631, 447, 631, 447, 1709, 
447, 631, 446, 1709, 446, 632, 446, 1709, 
447, 1709, 446, 1710, 446, 1709, 446, 1000};

const uint16_t rawDataC24[RAW_DATA_LEN_S1] PROGMEM ={
  4320, 4511, 456, 1699, 456, 624, 454, 1699, 
456, 1699, 457, 650, 428, 649, 428, 1699, 
457, 650, 428, 649, 429, 1698, 457, 649, 
429, 649, 428, 1700, 456, 1700, 455, 649, 
428, 1701, 477, 1679, 452, 652, 449, 1682, 
473, 1706, 449, 1706, 448, 1708, 447, 1708, 
448, 1707, 448, 631, 447, 1708, 447, 631, 
447, 631, 447, 630, 447, 631, 447, 631, 
447, 630, 447, 631, 447, 1708, 447, 631, 
447, 630, 447, 631, 447, 631, 447, 630, 
448, 630, 447, 1708, 448, 630, 448, 1707, 
447, 1709, 447, 1708, 447, 1709, 447, 1708, 
448, 1708, 447, 5309, 4313, 4519, 448, 1708, 
447, 631, 447, 1708, 447, 1708, 448, 630, 
448, 630, 448, 1707, 448, 630, 447, 631, 
447, 1708, 447, 631, 447, 631, 447, 1708, 
448, 1708, 447, 631, 447, 1708, 447, 1708, 
448, 630, 448, 1708, 447, 1708, 447, 1709, 
447, 1708, 447, 1709, 446, 1709, 446, 631, 
447, 1708, 447, 631, 447, 631, 447, 631, 
446, 631, 447, 631, 447, 631, 447, 631, 
447, 1708, 447, 631, 447, 631, 447, 630, 
447, 631, 447, 631, 447, 630, 447, 1709, 
446, 1709, 446, 1709, 447, 1714, 441, 1000};

const uint16_t rawDataC25[RAW_DATA_LEN_S1] PROGMEM ={
  4372, 4459, 508, 1648, 480, 626, 451, 1675, 
481, 1675, 480, 625, 453, 625, 479, 1649, 
507, 598, 479, 599, 452, 1678, 478, 625, 
452, 626, 452, 1677, 479, 1677, 484, 620, 
451, 1679, 477, 1680, 475, 628, 450, 1704, 
450, 1706, 449, 1707, 449, 1707, 448, 1708, 
448, 1707, 448, 630, 448, 1708, 448, 630, 
448, 630, 448, 629, 448, 630, 448, 630, 
448, 630, 448, 1707, 448, 1708, 448, 630, 
448, 629, 448, 630, 448, 630, 448, 630, 
448, 629, 448, 631, 447, 630, 448, 1708, 
448, 1708, 447, 1713, 443, 1708, 447, 1709, 
447, 1708, 448, 5310, 4314, 4520, 447, 1709, 
447, 631, 446, 1709, 447, 1709, 446, 632, 
446, 632, 446, 1709, 447, 631, 447, 631, 
447, 1709, 447, 631, 447, 631, 447, 1709, 
446, 1709, 447, 631, 447, 1709, 446, 1710, 
446, 632, 446, 1710, 446, 1709, 447, 1709, 
447, 1709, 446, 1710, 446, 1709, 447, 631, 
447, 1709, 446, 632, 446, 632, 446, 631, 
446, 632, 446, 632, 446, 632, 446, 1710, 
445, 1710, 446, 632, 446, 632, 445, 632, 
446, 632, 446, 632, 446, 632, 445, 632, 
446, 632, 446, 1709, 446, 1710, 445, 1710, 
446, 1710, 446, 1710, 446, 1710, 445, 1000};
  
void setup()
{
  // initialize serial for debugging
  Serial.begin(9600);
  // initialize serial for ESP module
  Serial1.begin(9600);
  // initialize ESP module
  WiFi.init(&Serial1);

  // check for the presence of the shield
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    // don't continue
    while (true);
  }

  // attempt to connect to WiFi network
  while ( status != WL_CONNECTED) {
    Serial.print("Attempting to connect to WPA SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network
    status = WiFi.begin(ssid, pass);
  }

  Serial.println("You're connected to the network");
  printWifiStatus();
  
  // start the web server on port 80
  server.begin();

  pinMode(Relay, OUTPUT); // Relay 모듈
}

void loop()
{
  int index1, index2;
 
  // listen for incoming clients
  WiFiEspClient client = server.available();
  if (client) {
    Serial.println("New client");
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    
    String message="";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        message += c;

        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && currentLineIsBlank) {
          index1 = message.indexOf('/');
          index2 = message.indexOf('H', index1+1);

          command = message.substring(index1+1,index2-1).toInt();
     //   Serial.println(message);
          message="";
          Serial.println(command);

          // LG 코드
          if ( command == 101 ) {
            mySender.send(rawDataLGOn,RAW_DATA_LEN_LG,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("On"));
          }

          else if ( command == 102 ) {
            mySender.send(rawDataLGOff,RAW_DATA_LEN_LG,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("Off"));
          }

          else if ( command == 103 ) {
            mySender.send(rawDataLGDry,RAW_DATA_LEN_LG,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("Dry"));
          }

          else if ( command == 123 ) {
            mySender.send(rawDataLG23,RAW_DATA_LEN_LG,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("23도_LG"));
          }

          else if ( command == 124 ) {
            mySender.send(rawDataLG24,RAW_DATA_LEN_LG,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("24도_LG"));
          }

          else if ( command == 125 ) {
            mySender.send(rawDataLG25,RAW_DATA_LEN_LG,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("25도_LG"));
          }
         
          // Samsung 코드
          /*else if ( command == 201 ) {
            mySender.send(rawDataSOn,RAW_DATA_LEN_S1,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("On"));
          }

          else if ( command == 202 ) {
            mySender.send(rawDataSOff,RAW_DATA_LEN_S1,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("Off"));
          }

          else if ( command == 203 ) {
            mySender.send(rawDataSDry,RAW_DATA_LEN_S1,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("Dry"));
          }*/

          else if ( command == 223 ) {
            mySender.send(rawDataS23,RAW_DATA_LEN_S1,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("23도_S"));
          }

          else if ( command == 224 ) {
            mySender.send(rawDataS24,RAW_DATA_LEN_S2,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("24도_S"));
          }

          else if ( command == 225 ) {
            mySender.send(rawDataS25,RAW_DATA_LEN_S1,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("25도_S"));
          }

          // Carrier 코드
          else if ( command == 301 ) {
            mySender.send(rawDataCOn,RAW_DATA_LEN_S1,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("On"));
          }

          else if ( command == 302 ) {
            mySender.send(rawDataCOff,RAW_DATA_LEN_S1,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("Off"));
          }

          else if ( command == 303 ) {
            mySender.send(rawDataCDry,RAW_DATA_LEN_S1,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("Dry"));
          }

          else if ( command == 323 ) {
            mySender.send(rawDataC23,RAW_DATA_LEN_S1,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("23도_C"));
          }

          else if ( command == 324 ) {
            mySender.send(rawDataC24,RAW_DATA_LEN_S1,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("24도_C"));
          }

          else if ( command == 325 ) {
            mySender.send(rawDataC25,RAW_DATA_LEN_S1,36); //Pass the buffer,length, optionally frequency
            Serial.println(F("25도_C"));
          }
          
          // 환풍기 제어 코드
          else if ( command == 401 ) {
            digitalWrite(Relay, HIGH);
            Serial.println(F("환풍기 On"));
          }

          else if ( command == 402 ) {
            digitalWrite(Relay, LOW);
            Serial.println(F("환풍기 Off"));
          }

          else {
          client.stop();
          Serial.println("Client disconnected");
          return;
          }
          
        }
        if (c == '\n') {
          // you're starting a new line
          currentLineIsBlank = true;
        }/*
        else if (c != '\r') {
          // you've gotten a character on the current line
          currentLineIsBlank = false;
        }*/
      }
    }

    client.flush();
    // give the web browser time to receive the data
    delay(10);

    // close the connection:
    Serial.println("Client disconnected");
  }
}

void printWifiStatus()
{
  // print the SSID of the network you're attached to
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);
  
  // print where to go in the browser
  Serial.println();
  Serial.print("To see this page in action, open a browser to http://");
  Serial.println(ip);
  Serial.println();
}
